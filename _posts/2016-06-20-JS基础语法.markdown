---
layout: post
title:  "JS快速入门"
date:   2016-06-20 08:45:59
author: zhanggeng
categories: JavaScript
---

# 快速入门

1. JS代码应该放在什么位置呢？

	* JS代码可以嵌在网页的任何地方，通常我们都把JS代码放到<head>中：

		```
				<html>
				<head>
				  <script>
				    ......
				  </script>
				</head>
				<body>
				  ...
				</body>
				</html>
		```

	* 把JS代码放到一个单独的.js文件中，这样利于维护，并且在多个页面可以各自引用同一份.js文件。

		```
				<html>
				<head>
				  <script src="/static/js/abc.js"></script>
				</head>
				<body>
				  ...
				</body>
				</html>
		```

2. 在同一页面中引入多个.js文件后，还可以在页面中多次编写`<script> js代码... </script>`代码，浏览器将会按照顺序依次执行这些JS代码。
3. `<script>` 标签的type属性，不必显式声明，因为默认的`type`就是JavaScript.


# 基本语法

1. JS语法：每个语句以`;`结束，语句块用`{...}`。
2. 行注释：
	
	```
	// 这是一行注释
	alert('hello'); // 这也是注释
	```
3. 块注释：

	```
	/* 从这里开始是块注释
	仍然是注释
	仍然是注释
	注释结束 */
	```
# 数据类型、变量、strict模式

JS中的数据类型有：Number、字符串、布尔值、null和undefined、数组、对象。


* *Number* JS不区分整数和浮点数，统一用Number表示。
	
	```
	123; // 整数123
	0.456; // 浮点数0.456
	1.2345e3; // 科学计数法表示		1.2345x1000，等同于1234.5
	-99; // 负数
	NaN; // NaN表示Not a Number，当无法计算结果时用NaN表示
	Infinity; // Infinity表示无限大，当数值超过了JavaScript的Number所能表示的最大值时，就表示为Infinity
	```
	> 需要注意的是：NaN这个特殊的Number与其他值都不相等，包括它自己。唯一能判断NaN的方法是通过isNaN()函数来判断： isNaN(NaN)。
	
*  *字符串* 字符串是以单引号 '' 或者 双引号 "" 括起来的任意文本。
*  *布尔值* true 、false


* *null和undefined* null表示一个“空”的值，它和`0`以及空字符串不同。undefined表示为定义。大多数情况下，我们都应该用null,undefined仅仅在判断函数参数是否传递的情况下有用。

* *strict模式*：不用var申明的变量就会被视为全局变量！ECMA推出的strict模式，是为了弥补JS的一个var申明的缺陷，在该模式下JS代码，强制通过var申明变量，未使用var申明变量就是用的， 将导致运行错误。 
	
	那么该如何启动strict模式呢？在JS代码的第一行写上下面的代码：
	
	```
	'use strict';
	```

* *变量*

	JS中变量名的命名规则：变量名是大小写英文、数字、$ 和 _ 的组合，且不能用数字开头。变量名也不能是JS的关键字。


# 比较运算符

== , === , < , <= , > , >= 
 
== 和 ===的区别：

* == 会自动转换数据类型再比较，很多时候，会得到诡异的结果；
* === 不会自动转换数据类型，数据类型不一致，返回false,如果一致，再比较。
* 由于这个设计缺陷，不要用==比较，始终用===比较。 
 
# 字符串

# 数组

# 对象

# 条件判断

# 循环

# Map和Set

# iterable



---
layout: post
title:  "JS浏览器"
date:   2016-07-02 08:45:59
author: zhanggeng
categories: JavaScript
---

不同的浏览器对JS支持的差异主要是，有些API接口不一样，比如：AJAX，File接口。对于ES6标准，不同的浏览器对各个特性支持也不一样。

在编写JS的时候，要充分考虑浏览器的差异，尽量让同一份JS代码能运行在不同浏览器中。


# 浏览器对象

## window

window对象不但充当全局作用域，而且表示浏览器窗口。

window对象有innerWidth 和 innerHeight属性，可以获取浏览器窗口的内部宽度和高度。内部宽高是指除去菜单栏、工具栏、边框等占位元素后，用于显示网页的净宽高。

```
console.log('window inner size is : ' + window.innerWidth + '=====' + window.innerHeight);
```

对应的获取浏览器窗口的整个宽高：

```
console.log('window outer size is : ' + window.outerWidth + '=====' + window.outerHeight);
```

## navigator

navigator对象表示浏览器的信息，最常用的属性包括：

* navigator.appName：浏览器名称；
* navigator.appVersion：浏览器版本；
* navigator.language：浏览器设置的语言；
* navigator.platform：操作系统类型；
* navigator.userAgent：浏览器设定的User-Agent字符串。

```
console.log('appName = ' + navigator.appName + '\n' +
    'appVersion = ' + navigator.appVersion + '\n' +
    'language = ' + navigator.language + '\n' +
    'platform = ' + navigator.platform + '\n' +
    'userAgent = ' + navigator.userAgent);
```

## screen

screen对象表示屏幕的信息，常用的属性有：

* screen.width：屏幕宽度，以像素为单位；
* screen.height：屏幕高度，以像素为单位；
* screen.colorDepth：返回颜色位数，如8、16、24。

```
console.log('Screen size = ' + screen.width + ' x ' + screen.height + '=====' + screen.colorDepth);
```

## location

location对象表示当前页面的URL信息。

```
http://www.example.com:8080/path/index.html?a=1&b=2#TOP
```

可以用location.href获取。要获得URL各个部分的值，可以这么写：

```
location.protocol; // 'http'
location.host; // 'www.example.com'
location.port; // '8080'
location.pathname; // '/path/index.html'
location.search; // '?a=1&b=2'
location.hash; // 'TOP'
```

要加载一个新页面，可以调用location.assign()。如果要重新加载当前页面，调用location.reload()方法非常方便。

```
if (confirm('重新加载当前页' + location.href + '?')) {
    location.reload();
} else {
    location.assign('/discuss'); // 设置一个新的URL地址
}
```

## document

document对象表示当前页面。由于HTML在浏览器中以DOM形式表示为树形结构，document对象就是整个DOM树的根节点。

document的title属性是从HTML文档中的<title>xxx</title>读取的，但是可以动态改变：

```
document.title = '努力学习JavaScript!';
```

要查找DOM树的某个节点，需要从document对象开始查找。最常用的查找是根据ID和Tag Name。

document 对象还有一个cookie属性，可以获取当前页面的Cookie。

JS可以通过document.cookie读取到当前页面的Cookie：

```
document.cookie
```

为了防止第三方JS代码恶意获取cookie，服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnly。


## history

history对象保存了浏览器的历史记录，JavaScript可以调用history对象的back()或forward ()，相当于用户点击了浏览器的“后退”或“前进”按钮。

这个对象属于历史遗留对象，对于现代Web页面来说，由于大量使用AJAX和页面交互，简单粗暴地调用history.back()可能会让用户感到非常愤怒。

新手开始设计Web页面时喜欢在登录页登录成功时调用history.back()，试图回到登录前的页面。这是一种错误的方法。

任何情况，你都不应该使用history这个对象了。(好，但是新的解决方案是什么？)


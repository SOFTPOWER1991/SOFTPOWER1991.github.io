---
layout: post
title:  "JS浏览器"
date:   2016-07-02 08:45:59
author: zhanggeng
categories: JavaScript
---

不同的浏览器对JS支持的差异主要是，有些API接口不一样，比如：AJAX，File接口。对于ES6标准，不同的浏览器对各个特性支持也不一样。

在编写JS的时候，要充分考虑浏览器的差异，尽量让同一份JS代码能运行在不同浏览器中。


# 浏览器对象

## window

window对象不但充当全局作用域，而且表示浏览器窗口。

window对象有innerWidth 和 innerHeight属性，可以获取浏览器窗口的内部宽度和高度。内部宽高是指除去菜单栏、工具栏、边框等占位元素后，用于显示网页的净宽高。

```
console.log('window inner size is : ' + window.innerWidth + '=====' + window.innerHeight);
```

对应的获取浏览器窗口的整个宽高：

```
console.log('window outer size is : ' + window.outerWidth + '=====' + window.outerHeight);
```

## navigator

navigator对象表示浏览器的信息，最常用的属性包括：

* navigator.appName：浏览器名称；
* navigator.appVersion：浏览器版本；
* navigator.language：浏览器设置的语言；
* navigator.platform：操作系统类型；
* navigator.userAgent：浏览器设定的User-Agent字符串。

```
console.log('appName = ' + navigator.appName + '\n' +
    'appVersion = ' + navigator.appVersion + '\n' +
    'language = ' + navigator.language + '\n' +
    'platform = ' + navigator.platform + '\n' +
    'userAgent = ' + navigator.userAgent);
```

## screen

screen对象表示屏幕的信息，常用的属性有：

* screen.width：屏幕宽度，以像素为单位；
* screen.height：屏幕高度，以像素为单位；
* screen.colorDepth：返回颜色位数，如8、16、24。

```
console.log('Screen size = ' + screen.width + ' x ' + screen.height + '=====' + screen.colorDepth);
```

## location

location对象表示当前页面的URL信息。

```
http://www.example.com:8080/path/index.html?a=1&b=2#TOP
```

可以用location.href获取。要获得URL各个部分的值，可以这么写：

```
location.protocol; // 'http'
location.host; // 'www.example.com'
location.port; // '8080'
location.pathname; // '/path/index.html'
location.search; // '?a=1&b=2'
location.hash; // 'TOP'
```

要加载一个新页面，可以调用location.assign()。如果要重新加载当前页面，调用location.reload()方法非常方便。

```
if (confirm('重新加载当前页' + location.href + '?')) {
    location.reload();
} else {
    location.assign('/discuss'); // 设置一个新的URL地址
}
```

## document

document对象表示当前页面。由于HTML在浏览器中以DOM形式表示为树形结构，document对象就是整个DOM树的根节点。

document的title属性是从HTML文档中的<title>xxx</title>读取的，但是可以动态改变：

```
document.title = '努力学习JavaScript!';
```

要查找DOM树的某个节点，需要从document对象开始查找。最常用的查找是根据ID和Tag Name。

document 对象还有一个cookie属性，可以获取当前页面的Cookie。

JS可以通过document.cookie读取到当前页面的Cookie：

```
document.cookie
```

为了防止第三方JS代码恶意获取cookie，服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnly。


## history

history对象保存了浏览器的历史记录，JavaScript可以调用history对象的back()或forward ()，相当于用户点击了浏览器的“后退”或“前进”按钮。

这个对象属于历史遗留对象，对于现代Web页面来说，由于大量使用AJAX和页面交互，简单粗暴地调用history.back()可能会让用户感到非常愤怒。

新手开始设计Web页面时喜欢在登录页登录成功时调用history.back()，试图回到登录前的页面。这是一种错误的方法。

任何情况，你都不应该使用history这个对象了。(好，但是新的解决方案是什么？)

## 操作DOM

HTML文档被解析后是一颗DOM树，要改变HTML结构，就要通过JS来操作DOM树。

操作一个DOM节点实际上就是这么几个动作：

* 更新：更新该DOM节点的内容，相当于更新了该DOM节点表示的HTML的内容；
* 遍历：遍历该DOM节点下的子节点，以便进行进一步操作；
* 添加：在该DOM节点下新增一个子节点，相当于动态增加了一个HTML节点；
* 删除：将该节点从HTML中删除，相当于删掉了该DOM节点的内容以及它包含的所有子节点。

获取某个DOM节点：

```
document.getElementById();直接定位唯一的一个DOM节点
document.getElementsByTagName();返回一组DOM节点
document.getElementsByClassName();返回一组DOM节点
```

```
<!-- HTML结构 -->
<div id="test-div">
<div class="c-red">
    <p id="test-p">JavaScript</p>
    <p>Java</p>
  </div>
  <div class="c-red c-green">
    <p>Python</p>
    <p>Ruby</p>
    <p>Swift</p>
  </div>
  <div class="c-green">
    <p>Scheme</p>
    <p>Haskell</p>
  </div>
</div>
```

```
// 选择<p>JavaScript</p>:
var js = document.getElementById('test-p');

// 选择<p>Python</p>,<p>Ruby</p>,<p>Swift</p>:
var arr = document.getElementsByClassName('c-red c-green')[0].children;

// 选择<p>Haskell</p>:
var haskell = document.getElementsByClassName('c-green')[1]. lastElementChild;
```


### 更新DOM

拿到一个DOM节点后，我们可以对它进行更新。

方式一：修改`innerHTML`属性，该方法，不但可以修改一个DOM节点的文本内容，还可以直接通过HTML片段修改DOM节点的内部子树：

```
// 获取<p id="p-id">...</p>
var p = document.getElementById('p-id');
// 设置文本为abc:
p.innerHTML = 'ABC'; // <p id="p-id">ABC</p>
// 设置HTML:
p.innerHTML = 'ABC <span style="color:red">RED</span> XYZ';
// <p>...</p>的内部结构已修改
```

// 获取<p id="p-id">...</p>
var p = document.getElementById('p-id');
// 设置文本为abc:
p.innerHTML = 'ABC'; // <p id="p-id">ABC</p>
// 设置HTML:
p.innerHTML = 'ABC <span style="color:red">RED</span> XYZ';
// <p>...</p>的内部结构已修改

方式二：修改innerText或textContent属性，这样可以自动对字符串进行HTML编码，保证无法设置任何HTML标签：

```
// 获取<p id="p-id">...</p>
var p = document.getElementById('p-id');
// 设置文本:
p.innerText = '<script>alert("Hi")</script>';
// HTML被自动编码，无法设置一个<script>节点:
// <p id="p-id">&lt;script&gt;alert("Hi")&lt;/script&gt;</p>
```

innerText和textContent的区别：

* innerText不返回隐藏元素的文本
* textContent返回所有文本（IE<9不支持textContent）

经常需要修改CSS，DOM节点的style属性对应所有的CSS，可以直接获取或设置。因为CSS允许font-size这样的属性，但是它在JS中不是有效的属性名，所以在JS中需要改写为驼峰式的命名fontSize:

```
// 获取<p id="p-id">...</p>
var p = document.getElementById('p-id');
// 设置CSS:
p.style.color = '#ff0000';
p.style.fontSize = '20px';
p.style.paddingTop = '2em';
```


*practice*

```
<!-- HTML结构 -->
<div id="test-div">
  <p id="test-js">javascript</p>
  <p>Java</p>
</div>
```

尝试获取指定节点并修改：

```
// 获取<p>javascript</p>节点:
var js = document.getElementById('test-js');

// 修改文本为JavaScript:
// TODO:
js.innerHTML = 'JavaScript';

// 修改CSS为: color: #ff0000, font-weight: bold
// TODO:


js.style.color = '#ff0000';
js.style.fontWeight = 'bold';
```

### 插入DOM

当我们获得了某个DOM节点，想在这个DOM节点内插入新的DOM，该咋办？

#### 如果该DOM节点是空的：

如：<div></div>，那么直接使用`innerHTML = '<span>child</span>'` 就可以修改DOM节点的内容，相当于'插入'了新的DOM节点；

#### 如果该DOM节点不是空的：

那就不能这么干了，因为innerHTML会直接替换掉原来的所有子节点。

有两个办法可以插入新节点：

* 一是使用appendChild，把一个子节点添加到父节点的最后一个子节点。

```
var
    js = document.getElementById('js'),
    list = document.getElementById('list');
list.appendChild(js);
```
因为插入的JS节点已经存在于当前的文档树，因此这个节点首先会从原先的位置删除，再插入到新的位置。

* 从零创建一个新的节点，然后插入到指定位置：

```
var
    list = document.getElementById('list'),
    haskell = document.createElement('p');
haskell.id = 'haskell';
haskell.innerText = 'Haskell';
list.appendChild(haskell);
```

#### insertBefore

`parentElement.insertBefore(newElement,referenceElement);`，会把子节点插入到referenceElement之前。

```
<!-- HTML结构 -->
<div id="list">
    <p id="java">Java</p>
    <p id="python">Python</p>
    <p id="scheme">Scheme</p>
</div>
```

```
var
    list = document.getElementById('list'),
    ref = document.getElementById('python'),
    haskell = document.createElement('p');
haskell.id = 'haskell';
haskell.innerText = 'Haskell';
list.insertBefore(haskell, ref);
```

如何循环一个父节点的所有子节点？可以通过迭代children属性实现：

```
var
    i, c,
    list = document.getElementById('list');
for (i = 0; i < list.children.length; i++) {
    c = list.children[i]; // 拿到第i个子节点
}
```


### 删除DOM

要删除一个DOM节点，首先要获得该节点本身以及它的父亲点，然后，调用父节点的removeChild把自己删掉：

```
// 拿到待删除节点:
var self = document.getElementById('to-be-removed');
// 拿到父节点:
var parent = self.parentElement;
// 删除:
var removed = parent.removeChild(self);
removed === self; // true
```

当你遍历一个父亲点的子节点进行删除的时候，注意，children属性是一个只读属性，并且它在子节点变化时会实时更新。





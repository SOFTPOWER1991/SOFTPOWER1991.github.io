---
layout: post
title:  "JS函数"
date:   2016-06-21 08:45:59
author: zhanggeng
categories: JavaScript
---

# 如何定义一个JS函数

1. 第一种定义方式：

	```
	function abs(x) {
    if (x >= 0) {
        return x;
    } else {
        return -x;
    }
	}
	```
	
	上述的函数定义中：
	
	*  `function`指出这是一个函数定义；
	*  `abs`是函数的名称；
	*  `(x)`括号内列出函数的参数，多个参数以`,`分割；
	*  `{ ... }`之间的代码是函数体，可以包含若干语句，甚至可以没有任何语句

2. 第二种定义方式：

	```
	var abs = function (x) {
    if (x >= 0) {
        return x;
    } else {
        return -x;
    }
	};
	```

在上述的定义中，`function(x){...}`是一个匿名函数，它没有函数名。这个匿名函数赋值给了变量abs，所以，通过变量`abs`就可以调用该函数。

> *Notice*: 第二种方式定义函数，需要在函数末尾加一个`;`，表示赋值语句结束。


# 如何调用JS函数：

按照顺序传入参数即可完成函数的调用：

```
abs(10); // 返回10
abs(-9); // 返回9
```

函数传入的参数比定义的参数多会怎样呢？

> JS允许传入任意个参数而不影响调用，因此传入的参数比定义的参数多也没问题，虽然函数内部并不需要这些参数。

函数传入的参数比定义的参数少会怎样呢？

> 少也没问题，比如abs()，将会返回NaN，此时abs(x)函数的参数 x 将受到undefined，计算结果为NaN 。

为了避免受到`undefined`，可以对参数进行检查：

```
function abs(x){
	if(typeof x!== 'number'){
		throw 'Not a number';
	}
	
	if(x >= 0){
		return x;
	}else{
		return -x;
	}
}
```

> 函数参数，这个和Java真是有很大的区别，在Java中，如何传入的参数个数，数据类型任意一个不一样，编译都不会通过，JS竟然还可以这样玩儿，牛逼；


# arguments

JS中的关键字：`arguments`，只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。arguments类似Array但它不是一个Array:

```
function foo(x) {
    alert(x); // 10
    for (var i=0; i<arguments.length; i++) {
        alert(arguments[i]); // 10, 20, 30
    }
}
foo(10, 20, 30);
```

利用arguments，你可以获得调用者传入的所有参数，实际情况中，arguments最常用语判断传入参数的个数。如下代码所示：

```
// foo(a[, b], c)
// 接收2~3个参数，b是可选参数，如果只传2个参数，b默认为null：
function foo(a, b, c) {
    if (arguments.length === 2) {
        // 实际拿到的参数是a和b，c为undefined
        c = b; // 把b赋给c
        b = null; // b变为默认值
    }
    // ...
}
```

# reset参数

由于JS函数允许接收任意个参数，我们就不得不用`arguments`来获取所有参数，如下代码所示：

```
function foo(a, b) {
    var i, rest = [];
    if (arguments.length > 2) {
        for (i = 2; i<arguments.length; i++) {
            rest.push(arguments[i]);
        }
    }
    console.log('a = ' + a);
    console.log('b = ' + b);
    console.log(rest);
}
```

在ES6标准中引入了rest参数，上面的函数可以改写为：

```
function foo(a, b, ...rest) {
    console.log('a = ' + a);
    console.log('b = ' + b);
    console.log(rest);
}

foo(1, 2, 3, 4, 5);
// 结果:
// a = 1
// b = 2
// Array [ 3, 4, 5 ]

foo(1);
// 结果:
// a = 1
// b = undefined
// Array []
```

> 1. rest参数只能写在最后，前面用`...`标识。从运行结果可以看到，传入参数先绑定a , b ，多余的参数以数组形式交给变量rest,所以，不再需要arguments我们就可以获取全部参数了。
> 2. 如果传入的参数连正常定义参数都没填满，rest参数会接收一个空数组。

# 小心你的return语句

JS引擎会在行末自动添加分号，这会让你栽到return语句的一个大坑：

such as:

```
function foo() {
    return
        { name: 'foo' };
}

foo(); // undefined
```
上面的代码在JS引擎执行后，变成了下面的样子：

```
function foo() {
    return; // 自动添加了分号，相当于return undefined;
        { name: 'foo' }; // 这行语句已经没法执行到了
}
```

这就是个大坑。




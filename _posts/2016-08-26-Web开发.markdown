---
layout: post
title:  "Web开发"
date:   2016-08-26 08:45:59
author: zhanggeng
categories: JavaScript
---

我读到这儿的时候有点小激动：

> 由于Node.js把JavaScript引入了服务器端，因此，原来必须使用PHP/Java/C#/Python/Ruby等其他语言来开发服务器端程序，现在可以使用Node.js开发了！

用Node.js开发Web服务器端，有几个显著的优势：

> 一是后端语言也是JavaScript，以前掌握了前端JavaScript的开发人员，现在可以同时编写后端代码；
> 二是前后端统一使用JavaScript，就没有切换语言的障碍了；
> 三是速度快，非常快！这得益于Node.js天生是异步的。

# koa

koa是Express的下一代基于Node.js的Web框架。Express是第一代流行的Web框架，它对Node.js的http进行了封装。koa目前最近进化到了koa2,基于ES7进行开发，完全使用Promise并配合async来实现异步：

# koa 入门

## Babel 转码: 可以将高版本的ES7代码转为ES6代码来执行

## koa middleware: 每个async函数称为middleware，这些middleware可以组合起来，完成很多有用的功能。


# 处理URL

## koa-router

为了处理URL，我们引入koa-router这个middleware，让它负责处理URL映射。

```
const Koa = require('koa');

// 注意require('koa-router')返回的是函数:
const router = require('koa-router')();

const app = new Koa();

// log request URL:
app.use(async (ctx, next) => {
    console.log(`Process ${ctx.request.method} ${ctx.request.url}...`);
    await next();
});

// add url-route:
router.get('/hello/:name', async (ctx, next) => {
    var name = ctx.params.name;
    ctx.response.body = `<h1>Hello, ${name}!</h1>`;
});

router.get('/', async (ctx, next) => {
    ctx.response.body = '<h1>Index</h1>';
});

// add router middleware:
app.use(router.routes());

app.listen(3000);
console.log('app started at port 3000...');
```


处理get请求：

```
router.get('/path', async fn)
```

处理post请求：

```
router.post('/path', async fn)
```

post请求处理URL时，通常会发送一个表单，或者JSON，作为request的body发送.但是无论Node.js还是koa提供的request对象，都不提供解析request的body的功能！

需要借助middleware来解析原始request请求，然后，把解析后的参数，绑定到ctx.request.body中。

```
"koa-bodyparser": "3.2.0"
```
代码重构：

所有处理URL的函数按功能组存放在controllers目录。



---
layout: post
title:  "Node.js"
date:   2016-08-16 08:45:59
author: zhanggeng
categories: JavaScript
---

# 模块

在Node环境中，一个.js文件就称之为一个模块。

使用模块的好处：

1. 提高了代码的可维护性
2. 编写代码不必从零开始。当一个模块编写完毕，就可以被其他地方引用
3. 使用模块还可以避免函数名和变量名冲突

导出模块时用：

```
module.exports = xxx
```

# 基本模块

## global

JS有且仅有一个全局对象，在浏览器中，叫window对象。在Node.js环境中，这个唯一的对象叫global，这个对象的属性和方法和浏览器环境的window也不同。

在命令行中输入node,进入Node.js交互环境，可以直接输入：

```
global.console
```

可以看到信息：

```
Console {
  log: [Function: bound ],
  info: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  dir: [Function: bound ],
  time: [Function: bound ],
  timeEnd: [Function: bound ],
  trace: [Function: bound trace],
  assert: [Function: bound ],
  Console: [Function: Console] }
```

## process

process是Node.js提供的一个对象，代表当前Node.js进程。通过process对象可以拿到许多有用信息：

```
> process === global.process;
true
> process.version;
'v5.2.0'
> process.platform;
'darwin'
> process.arch;
'x64'
> process.cwd(); //返回当前工作目录
'/Users/michael'
> process.chdir('/private/tmp'); // 切换当前工作目录
undefined
> process.cwd();
'/private/tmp'
```

JS 程序是由时间驱动执行的单线程模型，Node.js不断执行响应事件的JS函数，知道没有任何响应事件的函数可以执行时，Node.js就退出。

如果我们想要在下一次事件响应中执行代码，可以调用process.nextTick():

```
// process.nextTick()将在下一轮事件循环中调用:
process.nextTick(function () {
    console.log('nextTick callback!');
});
console.log('nextTick was set!');
```

# 判断JS执行环境

有很多JS代码既能在浏览器中执行，也能在Node环境执行，有些时候，程序本身需要判断自己到底是在什么环境下执行，常用的方式是根绝浏览器和Node环境提供的全局变量名称来判断：

```
if (typeof(window) === 'undefined') {
    console.log('node.js');
} else {
    console.log('browser');
}
```





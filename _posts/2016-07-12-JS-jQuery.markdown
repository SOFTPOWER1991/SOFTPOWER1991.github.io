---
layout: post
title:  "jQuery"
date:   2016-07-12 08:45:59
author: zhanggeng
categories: JavaScript
---

今天终于要学习jQuery了，以前只是听说过，从来没去了解过这是个啥，好激动！

jQuery能干神马？

* 消除浏览器差异：你不需要自己写冗长的代码来针对不同的浏览器来绑定事件，编写AJAX等代码；
* 简洁的操作DOM的方法：写$('#test')肯定比document.getElementById('test')来得简洁；
* 轻松实现动画、修改CSS等各种操作。

$ 符号：

$ 是变量jQuery的别名，jQuery把所有功能全部封装在一个全局变量jQuery中。

```
window.jQuery; // jQuery(selector, context)
window.$; // jQuery(selector, context)
$ === jQuery; // true
typeof($); // 'function'
```

$本质上是一个函数，但是函数也是对象，于是它除了可以直接调用外，还有很多其它属性。

*NOTICE:* 很多JS压缩工具可以对函数名和参数改名，因此压缩过的jQuery源码$函数可能变成a(b ,c)。

大多数时候，可以直接用`$`。如果`$`不幸被占用，可以让jQuery把$变量教出来，使用jQuery这个变量：

```
$; // jQuery(selector, context)
jQuery.noConflict();
$; // undefined
jQuery; // jQuery(selector, context)
```

这样做的原理：jQuery在占用$之前，先在内部保存了原来的$,调用jQuery.noConflict()时会把原来保存的变量还原。

# 选择器

jQuery是选择器的核心，写出来类似`$('#dom-id')`;

jQuery的选择器可以帮我们快速定位到一个或多个DOM节点。

## 按照ID查找：

如果某个DOM节点有id属性，利用jQuery查找如下：

```
// 查找<div id = 'abc'>;
var div = $(''#abc);
```

*NOTICE:* `#abc`以`#`开头。返回的对象是jQuery对象。

什么是jQuery对象？

jQuery对象类似数组，它的每个元素都是一个引用了DOM节点的对象。

以上面的查找为例，如果id为abc的div存在，返回的jQuery对象如下：

```
[<div id="abc">...</div>]
```

如果id为abc的<div>不存在，返回的jQuery对象如下：

```
[]
```
总之，jQuery的选择器不会返回undefined 或者null ，这样的好处是你不必再下一行判断if(div === undefined);

jQuery对象和DOM对象之间可以互相转化：

```
var div = $('#abc'); // jQuery对象
var divDom = div.get(0); // 假设存在div，获取第1个DOM元素
var another = $(divDom); // 重新把DOM包装为jQuery对象
```

## 按tag查找

只需要写上tag名称就可以了:

```
var ps = $('p'); // 返回所有<p>节点
ps.length; // 数一数页面有多少个<p>节点
```

## 按照class查找：

按class查找注意的class名称前加一个`.`：

```
var a = $('.red'); // 所有节点包含`class="red"`都将返回
// 例如:
// <div class="red">...</div>
// <p class="green red">...</p>
```

如果有多个节点包含多个class,可以查找同时包含red和green的节点：

```
var a = $('.red.green'); // 注意没有空格！
// 符合条件的节点：
// <div class="red green">...</div>
// <div class="blue green red">...</div>
```

## 按属性查找

一个DOM节点除了id和class外还可以有很多属性，按属性查找会很方便：

```
var email = $('[name=email]'); // 找出<??? name="email">
var passwordInput = $('[type=password]'); // 找出<??? type="password">
var a = $('[items="A B"]'); // 找出<??? items="A B">
```
当属性的值包含空格等特殊字符时，需要用双引号括起来。

按属性查找还可以使用前缀查找或者后缀查找：

```
var icons = $('[name^=icon]'); // 找出所有name属性值以icon开头的DOM
// 例如: name="icon-1", name="icon-2"
var names = $('[name$=with]'); // 找出所有name属性值以with结尾的DOM
// 例如: name="startswith", name="endswith"
```

这个方法尤其适合通过class属性查找，且不受class包含多个名称的影响：

```
var icons = $('[class^="icon-"]'); // 找出所有class包含至少一个以`icon-`开头的DOM
// 例如: class="icon-clock", class="abc icon-home"
```

## 组合查找

组合查找就是把上述简单选择器组合起来使用。

如果我们查找$('[name=email]')，很可能把表单外的<div name="email">也找出来，但我们只希望查找<input>，就可以这么写：

```
var emailInput = $('input[name=email]'); // 不会找出<div name="email">
```

同理，根据tag和class来组合查找也很常见：

```
var tr = $('tr.red'); // 找出<tr class="red ...">...</tr>
```

## 多项选择器

多项选择器就是把多个选择器用`,`组合起来一块儿选：

```
$('p,div'); // 把<p>和<div>都选出来
$('p.red,p.green'); // 把<p class="red">和<p class="green">都选出来
```

*NOTICE:* 选出来的元素是按照他们在HTML中出现的顺序排列的，而且不会有重复元素。例如，<p class="red green">不会被上面的$('p.red,p.green')选择两次。





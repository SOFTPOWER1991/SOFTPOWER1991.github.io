---
layout: post
title:  "jQuery"
date:   2016-07-12 08:45:59
author: zhanggeng
categories: JavaScript
---

今天终于要学习jQuery了，以前只是听说过，从来没去了解过这是个啥，好激动！

jQuery能干神马？

* 消除浏览器差异：你不需要自己写冗长的代码来针对不同的浏览器来绑定事件，编写AJAX等代码；
* 简洁的操作DOM的方法：写$('#test')肯定比document.getElementById('test')来得简洁；
* 轻松实现动画、修改CSS等各种操作。

$ 符号：

$ 是变量jQuery的别名，jQuery把所有功能全部封装在一个全局变量jQuery中。

```
window.jQuery; // jQuery(selector, context)
window.$; // jQuery(selector, context)
$ === jQuery; // true
typeof($); // 'function'
```

$本质上是一个函数，但是函数也是对象，于是它除了可以直接调用外，还有很多其它属性。

*NOTICE:* 很多JS压缩工具可以对函数名和参数改名，因此压缩过的jQuery源码$函数可能变成a(b ,c)。

大多数时候，可以直接用`$`。如果`$`不幸被占用，可以让jQuery把$变量教出来，使用jQuery这个变量：

```
$; // jQuery(selector, context)
jQuery.noConflict();
$; // undefined
jQuery; // jQuery(selector, context)
```

这样做的原理：jQuery在占用$之前，先在内部保存了原来的$,调用jQuery.noConflict()时会把原来保存的变量还原。

# 选择器

jQuery是选择器的核心，写出来类似`$('#dom-id')`;

jQuery的选择器可以帮我们快速定位到一个或多个DOM节点。

#### 按照ID查找：

如果某个DOM节点有id属性，利用jQuery查找如下：

```
// 查找<div id = 'abc'>;
var div = $(''#abc);
```

*NOTICE:* `#abc`以`#`开头。返回的对象是jQuery对象。

什么是jQuery对象？

jQuery对象类似数组，它的每个元素都是一个引用了DOM节点的对象。

以上面的查找为例，如果id为abc的div存在，返回的jQuery对象如下：

```
[<div id="abc">...</div>]
```

如果id为abc的<div>不存在，返回的jQuery对象如下：

```
[]
```
总之，jQuery的选择器不会返回undefined 或者null ，这样的好处是你不必再下一行判断if(div === undefined);

jQuery对象和DOM对象之间可以互相转化：

```
var div = $('#abc'); // jQuery对象
var divDom = div.get(0); // 假设存在div，获取第1个DOM元素
var another = $(divDom); // 重新把DOM包装为jQuery对象
```

#### 按tag查找

只需要写上tag名称就可以了:

```
var ps = $('p'); // 返回所有<p>节点
ps.length; // 数一数页面有多少个<p>节点
```

#### 按照class查找：

按class查找注意的class名称前加一个`.`：

```
var a = $('.red'); // 所有节点包含`class="red"`都将返回
// 例如:
// <div class="red">...</div>
// <p class="green red">...</p>
```

如果有多个节点包含多个class,可以查找同时包含red和green的节点：

```
var a = $('.red.green'); // 注意没有空格！
// 符合条件的节点：
// <div class="red green">...</div>
// <div class="blue green red">...</div>
```

#### 按属性查找

一个DOM节点除了id和class外还可以有很多属性，按属性查找会很方便：

```
var email = $('[name=email]'); // 找出<??? name="email">
var passwordInput = $('[type=password]'); // 找出<??? type="password">
var a = $('[items="A B"]'); // 找出<??? items="A B">
```
当属性的值包含空格等特殊字符时，需要用双引号括起来。

按属性查找还可以使用前缀查找或者后缀查找：

```
var icons = $('[name^=icon]'); // 找出所有name属性值以icon开头的DOM
// 例如: name="icon-1", name="icon-2"
var names = $('[name$=with]'); // 找出所有name属性值以with结尾的DOM
// 例如: name="startswith", name="endswith"
```

这个方法尤其适合通过class属性查找，且不受class包含多个名称的影响：

```
var icons = $('[class^="icon-"]'); // 找出所有class包含至少一个以`icon-`开头的DOM
// 例如: class="icon-clock", class="abc icon-home"
```

#### 组合查找

组合查找就是把上述简单选择器组合起来使用。

如果我们查找$('[name=email]')，很可能把表单外的<div name="email">也找出来，但我们只希望查找<input>，就可以这么写：

```
var emailInput = $('input[name=email]'); // 不会找出<div name="email">
```

同理，根据tag和class来组合查找也很常见：

```
var tr = $('tr.red'); // 找出<tr class="red ...">...</tr>
```

#### 多项选择器

多项选择器就是把多个选择器用`,`组合起来一块儿选：

```
$('p,div'); // 把<p>和<div>都选出来
$('p.red,p.green'); // 把<p class="red">和<p class="green">都选出来
```

*NOTICE:* 选出来的元素是按照他们在HTML中出现的顺序排列的，而且不会有重复元素。例如，<p class="red green">不会被上面的$('p.red,p.green')选择两次。


# 层级选择器

### 层级选择器

如果两个DOM元素具有层级关系，可以用`$('ancestor descendant')` 来选择，层级之间用空格隔开。例如：

```
<!-- HTML结构 -->
<div class="testing">
    <ul class="lang">
        <li class="lang-javascript">JavaScript</li>
        <li class="lang-python">Python</li>
        <li class="lang-lua">Lua</li>
    </ul>
</div>
```

要选出JavaScript，可以用层级选择器：

```
$('ul.lang li.lang-javascript'); // [<li class="lang-javascript">JavaScript</li>]
$('div.testing li.lang-javascript'); // [<li class="lang-javascript">JavaScript</li>]

```

### 子选择器

子选择器`$('parent>child')` 类似层级选择器，但是限定了层级关系必须是父子关系，就是`<child>` 节点必须是`<parent>`节点的直属子节点。还是以上面的例子：

```
$('ul.lang>li.lang-javascript'); // 可以选出[<li class="lang-javascript">JavaScript</li>]
$('div.testing>li.lang-javascript'); // [], 无法选出，因为<div>和<li>不构成父子关系
```

### 过滤器

过滤器一般不单独使用，它通常依附在选择器上，帮助我们更精确的定位元素。观察过滤器的效果：

```
$('ul.lang li'); // 选出JavaScript、Python和Lua 3个节点

$('ul.lang li:first-child'); // 仅选出JavaScript
$('ul.lang li:last-child'); // 仅选出Lua
$('ul.lang li:nth-child(2)'); // 选出第N个元素，N从1开始
$('ul.lang li:nth-child(even)'); // 选出序号为偶数的元素
$('ul.lang li:nth-child(odd)'); // 选出序号为奇数的元素
```

### 表单相关

针对表单元素，jQuery有一组特殊的选择器：

* :input：可以选择<input>，<textarea>，<select>和<button>；
* :file：可以选择<input type="file">，和input[type=file]一样；
* :checkbox：可以选择复选框，和input[type=checkbox]一样；
* :radio：可以选择单选框，和input[type=radio]一样；
* :focus：可以选择当前输入焦点的元素，例如把光标放到一个<input>上，用$('input:focus')就可以选出；
* :checked：选择当前勾上的单选框和复选框，用这个选择器可以立刻获得用户选择的项目，如$('input[type=radio]:checked')；
* :enabled：可以选择可以正常输入的<input>、<select>等，也就是没有灰掉的输入；
* :disabled：和:enabled正好相反，选择那些不能输入的。
* $('div:visible'); // 所有可见的div
* $('div:hidden'); // 所有隐藏的div


# 查找和过滤

通常情况下选择器可以直接定位到我们想要的元素，但是，当我们拿到一个jQuery对象后，还可以以这个对象为基准，进行查找和过滤。

在某个节点的所有子节点中查找，使用`find()`方法，它本身又接收一个任意的选择器。

```
<!-- HTML结构 -->
<ul class="lang">
    <li class="js dy">JavaScript</li>
    <li class="dy">Python</li>
    <li id="swift">Swift</li>
    <li class="dy">Scheme</li>
    <li name="haskell">Haskell</li>
</ul>
```

用`find()`查找：

```
var ul = $('ul.lang'); // 获得<ul>
var dy = ul.find('.dy'); // 获得JavaScript, Python, Scheme
var swf = ul.find('#swift'); // 获得Swift
var hsk = ul.find('[name=haskell]'); // 获得Haskell
```

如果要从当前节点开始向上查找，使用`parent()`方法：

```
var swf = $('#swift'); // 获得Swift
var parent = swf.parent(); // 获得Swift的上层节点<ul>
var a = swf.parent('div.red'); // 从Swift的父节点开始向上查找，直到找到某个符合条件的节点并返回
```

同一层级的节点，可以通过`next()`和`prev()`方法进行遍历，例如：

当我们已经拿到`swift`节点后：

```
var swift = $('#swift');

swift.next(); // Scheme
swift.next('[name=haskell]'); // Haskell，因为Haskell是后续第一个符合选择器条件的节点

swift.prev(); // Python
swift.prev('.js'); // JavaScript，因为JavaScript是往前第一个符合选择器条件的节点
```

### 过滤

`filter()`方法可以过滤掉不符合选择器条件的节点：

```
var langs = $('ul.lang li'); // 拿到JavaScript, Python, Swift, Scheme和Haskell
var a = langs.filter('.dy'); // 拿到JavaScript, Python, Scheme
```

或者传入一个函数，需要注意的是函数内部的this呗绑定为DOM对象，不是jQuery对象：

```
var langs = $('ul.lang li'); // 拿到JavaScript, Python, Swift, Scheme和Haskell
langs.filter(function () {
    return this.innerHTML.indexOf('S') === 0; // 返回S开头的节点
}); // 拿到Swift, Scheme
```

`map()`方法把一个jQuery对象包含的若干DOM节点转换为其他对象：

```
var langs = $('ul.lang li'); // 拿到JavaScript, Python, Swift, Scheme和Haskell
var arr = langs.map(function () {
    return this.innerHTML;
}).get(); // 用get()拿到包含string的Array：['JavaScript', 'Python', 'Swift', 'Scheme', 'Haskell']
```

一个jQuery对象如果包含了不止一个DOM节点，first()，last()和slice()方法可以返回一个新的jQuery对象，把不需要的DOM节点去掉：

```
var langs = $('ul.lang li'); // 拿到JavaScript, Python, Swift, Scheme和Haskell
var js = langs.first(); // JavaScript，相当于$('ul.lang li:first-child')
var haskell = langs.last(); // Haskell, 相当于$('ul.lang li:last-child')
var sub = langs.slice(2, 4); // Swift, Scheme, 参数和数组的slice()方法一致
```

# 操作DOM

jQuery的强大的选择器，使我们在拿到jQuery对象后，可以轻松的操作对应的DOM节点。

### 修改Text和HTML

jQuery对象的`text()`和`html()`方法分别获取节点的文本和原始HTML文本：

```
<!-- HTML结构 -->
<ul id="test-ul">
    <li class="js">JavaScript</li>
    <li name="book">Java &amp; JavaScript</li>
</ul>
```

用jQuery分别获取文本和HTML:

```
$('#test-ul li[name=book]').text(); // 'Java & JavaScript'
$('#test-ul li[name=book]').html(); // 'Java &amp; JavaScript'
```

分别获取文本和HTML:

```
$('#test-ul li[name=book]').text(); // 'Java & JavaScript'
$('#test-ul li[name=book]').html(); // 'Java &amp; JavaScript'
```

那么该怎么设置文本或者 HTML内容呢？

> 无参数调用text()是获取文本；
> 传入参数就编程设置文本；
> HTML也类似

对下面这个HTML代码进行操作：

```
<ul id="test-ul">
    <li class="js"></li>
    <li name="book"></li>
```

```
var j1 = $('#test-ul li.js');
var j2 = $('#test-ul li[name=book]');

j1.html('<span style="color: red">JavaScript---------</span>');
j2.text('JavaScript & ECMAScript===========');
```

一个jQuery对象可以包含0个或任意个DOM对象，它的方法实际上会作用在对应的每个DOM节点上，因此，我们可以执行一个操作，作用在对应的一组DOM节点上。


### 修改CSS

jQuery对象有个方法：css('name','value');

jQuery对象的所有方法都返回一个jQuery对象（肯可能是新的也可能是自身），这样就可以进行链式调用。

jQuery还提供如下方法：

```
var div = $('#test-div');
div.hasClass('highlight'); // false， class是否包含highlight
div.addClass('highlight'); // 添加highlight这个class
div.removeClass('highlight'); // 删除highlight这个class
```

### 显示和隐藏DOM

jQuery提供了show()和hide()方法，可以实现DOM的隐藏和展示：

```
var a = $('a[target=_blank]');
a.hide();
a.show();
```

*NOTICE:*

隐藏DOM节点并未改变DOM树的结构，它只影响了DOM节点的显示。这和删除DOM节点是不同的。

### 获取DOM信息

jQuery对象，可以让我们直接获取DOM的宽高信息，而无需针对不同浏览器编写特定代码：

```
// 浏览器可视窗口大小:
$(window).width(); // 800
$(window).height(); // 600

// HTML文档大小:
$(document).width(); // 800
$(document).height(); // 3500

// 某个div的大小:
var div = $('#test-div');
div.width(); // 600
div.height(); // 300
div.width(400); // 设置CSS属性 width: 400px，是否生效要看CSS是否有效
div.height('200px'); // 设置CSS属性 height: 200px，是否生效要看CSS是否有效

```

`attr()`和`removeAttr()`方法用于操作DOM节点的属性：

```
// <div id="test-div" name="Test" start="1">...</div>
var div = $('#test-div');
div.attr('data'); // undefined, 属性不存在
div.attr('name'); // 'Test'
div.attr('name', 'Hello'); // div的name属性变为'Hello'
div.removeAttr('name'); // 删除name属性
div.attr('name'); // undefined
```

prop()和attr()类似（我感觉都是用来返回属性对应的值），在HTML5中，有一种属性在DOM节点中可以没有值，只有出现与不出现两种，例如：

```
<input id="test-radio" type="radio" name="test" checked value="1">
```
等价于：

```
<input id="test-radio" type="radio" name="test" checked="checked" value="1">
```

attr()和prop()对于属性checked处理有所不同：

```
var radio = $('#test-radio');
radio.attr('checked'); // 'checked'
radio.prop('checked'); // true
```

prop()返回值更合理一些。用is()方法判断更好：

```
var radio = $('#test-radio');
radio.is(':checked'); // true
```

类似的属性还有selected，处理时最好用`is(':selected')`。

### 操作表单

对于表单元素，jQuery对象统一提供val()方法获取和设置对应的value属性：

```
/*
    <input id="test-input" name="email" value="">
    <select id="test-select" name="city">
        <option value="BJ" selected>Beijing</option>
        <option value="SH">Shanghai</option>
        <option value="SZ">Shenzhen</option>
    </select>
    <textarea id="test-textarea">Hello</textarea>
*/
var
    input = $('#test-input'),
    select = $('#test-select'),
    textarea = $('#test-textarea');

input.val(); // 'test'
input.val('abc@example.com'); // 文本框的内容已变为abc@example.com

select.val(); // 'BJ'
select.val('SH'); // 选择框已变为Shanghai

textarea.val(); // 'Hello'
textarea.val('Hi'); // 文本区域已更新为'Hi'
```

一个val()就统一了各种输入框的取值和赋值的问题。

# 操作文件

HTML表单中，可以上传文件的唯一控件是<input type = "file">

*Notice*: 

当一个表单包含<input type = "file">时，表单的enctype必须指定为`multipart/form-data` ， method必须指定为post，浏览器才能正确编码并以`multipart/form-data`格式发送表单的数据。 

### File API

H5，新增的File API 允许JS读取文件内容，获得更多的文件信息。

H5的File API 提供了File 和FileReader两个主要对象，可以获得文件信息并读取文件。

#### JS demo: 读取用户选取的图片文件，并在一个<div>中预览图像


### 回调：

在JS中，浏览器的JS执行引擎在执行JS代码时，总是以单线程模式执行。任何时候，JS代码都不可能同时又多余1个线程在执行。

那么单线程模式任务的JS，如何处理多任务？

执行多任务时进行异步调用，在此之前设置一个回调函数，当异步调用结束后，回调至回调函数，这样我们就可以在回调函数内获取异步任务执行的结果。

### 修改DOM结构

#### 添加DOM

添加新的DOM节点，除了用jQuery的html()，还可以用append()方法。

append()方法，可以传入HTML片段，原始的DOM对象，jQuery对象和函数对象。

```
ul.append('<li><span>Haskell</span></li>');

// 创建DOM对象:
var ps = document.createElement('li');
ps.innerHTML = '<span>Pascal</span>';
// 添加DOM对象:
ul.append(ps);

// 添加jQuery对象:
ul.append($('#scheme'));

// 添加函数对象:
ul.append(function (index, html) {
    return '<li><span>Language - ' + index + '</span></li>';
});
```

如果要传入函数，那么要求这个函数返回一个字符串、DOM对象或者jQuery对象。

append()把DOM添加到最后，prepend()把DOM添加到最前面。

如果要添加的DOM节点已经存在于HTML文档中，它会先从文档移除，然后再添加，也就是说：append（），你可以移动一个DOM节点。

如要要把新节点插入到指定位置，可以先定位到一个节点，然后用after()方法，同级节点可以用after() 或者 before() 方法。

#### 删除节点

删除DOM节点，拿到jQuery对象后直接调用remove()方法就可以了。如果jQuery对象包含若干DOM节点，可以一次删除多个DOM节点。

# 事件

为什么要用jQuery来处理事件？

JS在浏览器中以单线程模式运行，页面加载后，页面上所有的JS代码被执行完成后，就只能依赖触发事件来执行JS代码。如果在相应的节点绑定了对应的JS处理函数，浏览器接收到用户的鼠标或键盘输入后，就会触发相应的事件。

问题来了，不同浏览器绑定事件的代码都不一样，用jQuery来写绑定事件的代码，就可以屏蔽不同浏览器之间的差异。

`on`绑定一个事件，我们需要传入事件名称和对应的处理函数。

jQuery能够绑定的事件主要包括：

*鼠标事件*

click: 鼠标单击时触发；
dblclick: 鼠标双击时触发；
mouseenter:鼠标进入时触发； 
mouseleave: 鼠标移出时触发；
mousemove: 鼠标在DOM内部移动时触发； 
hover: 鼠标进入和退出时触发两个函数，相当于mouseenter 加上mouseleave.

*键盘事件*

键盘事件仅作用在当前焦点的DOM上，通常是<input> 和 <textarea>、

keydown: 键盘按下时触发；
keyup: 键盘松开时触发；
keypress: 按一次键后触发；

*其他事件*

focus: 当DOM获得焦点时触发；
blur: 当DOM失去焦点时触发；
change: 当<input>、<select> 或<textarea>的内容改变时触发； 
submit : 当<form>提交时触发。 
ready: 当页面被载入并且DOM树完成初始化后触发。

### 事件参数

对于mousemove 和 keypress这些事件，需要传入Event对象作为参数，但是问题是，

1. 我如何知道，Event有哪些方法，或者属性呢？
2. 我怎么知道，有哪些事件需要传入参数呢？


### 取消绑定

一个已被绑定的事件可以解除绑定，通过off('click' , function)实现：

```
function hello() {
    alert('hello!');
}

a.click(hello); // 绑定事件

// 10秒钟后解除绑定:
setTimeout(function () {
    a.off('click', hello);
}, 10000);
```

### 事件触发条件

为什么要手动触发一个事件呢？

### 浏览器安全限制

在浏览器中，有些JS代码只有在用户触发下才能执行。

# 动画

js实现动画原理：以固定的时间间隔，每次把DOM元素的CSS样式修改一点，看起来就像是动画了。

jQuery实现动画非常简单：

### show / hide / toggle():左上角逐渐展开或收缩的

以无参数形式调用show()和hide()，会显示和隐藏DOM元素。但是，只要传递一个时间参数进去，就变成了一个动画。

### slideUp /slideDown/slideToggle：垂直方向逐渐展开或收缩的

### fadeIn/fadeOut/fadeToggle: 淡入淡出，不断设置DOM元素的opacity属性来实现。

### 自定义动画

animate(): 可以实现任意动画效果，我们需要传入的参数是DOM元素最终的CSS状态和时间，jQuery在时间段内不断调整CSS直到达到我们设定的值。

```
var div = $('#test-animate');
div.animate({
    opacity: 0.25,
    width: '256px',
    height: '256px'
}, 3000); // 在3秒钟内CSS过渡到设定值
```

### 串行动画

jQuery的动画效果还可以串行执行，通过delay()方法还可以实现暂停，这样，我们可以实现更复杂的动画效果，因为动画需要执行一段时间，所以jQuery必须不断返回新的Promise对象才能后续执行操作。简单的把动画封装在函数中是不够的。

### 为什么有的动画没有效果

有时候会遇到，有的动画如slideUp()根本没有效果。这是因为jQuery动画的原理是逐渐改变CSS的值，如height从100px逐渐变为0。但是很多不是block性质的DOM元素，对他们设置height根本就不起作用，所以动画也就没有效果。













